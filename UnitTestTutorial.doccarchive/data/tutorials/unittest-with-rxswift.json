{"variants":[{"paths":["\/tutorials\/unittest-with-rxswift"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"Unit Tests","estimatedTime":"20min","category":"Unit test with RxSwift","categoryPathComponent":"UnitTest-with-RxSwift","role":"overview"},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unit testing in Swift involves breaking down code into small, testable components known as units. These units could be functions, methods, or even entire classes. By isolating these units and subjecting them to various scenarios, developers can assert the expected behavior and uncover potential bugs or regressions."}]}],"title":"Unit Tests","kind":"hero","action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","overridingTitle":"Get started","identifier":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTestTutorial\/ViewModel","isActive":true}},{"chapters":[{"tutorials":["doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTestTutorial\/ViewModel"],"image":"chapter_viewmodel.png","content":[{"inlineContent":[{"type":"text","text":"View models are a crucial component in many modern iOS applications, serving as intermediaries between the UI layer and the business logic. When integrating RxSwift, a popular reactive programming framework for Swift, into view models, unit testing becomes even more important to ensure the reactive streams behave as expected."}],"type":"paragraph"}],"name":"UnitTest with ViewModel"}],"kind":"volume","name":null,"image":null,"content":[]}],"kind":"overview","identifier":{"url":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTest-with-RxSwift","interfaceLanguage":"swift"},"hierarchy":{"reference":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTest-with-RxSwift","paths":[]},"references":{"doc://com.example.UnitTestTutorial/tutorials/UnitTestTutorial/ViewModel":{"abstract":[{"type":"text","text":"When writing unit tests for view models using RxSwift, there are several key aspects to consider:"}],"type":"topic","url":"\/tutorials\/unittesttutorial\/viewmodel","kind":"project","estimatedTime":"20min","title":"ViewModel","role":"project","identifier":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTestTutorial\/ViewModel"},"doc://com.example.UnitTestTutorial/tutorials/UnitTest-with-RxSwift":{"type":"topic","abstract":[{"type":"text","text":"Unit testing in Swift involves breaking down code into small, testable components known as units. These units could be functions, methods, or even entire classes. By isolating these units and subjecting them to various scenarios, developers can assert the expected behavior and uncover potential bugs or regressions."}],"url":"\/tutorials\/unittest-with-rxswift","kind":"overview","title":"Unit Tests","role":"overview","identifier":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTest-with-RxSwift"},"chapter_viewmodel.png":{"alt":"UnitTest with ViewModel","variants":[{"url":"\/images\/chapter_viewmodel.png","traits":["1x","light"]}],"type":"image","identifier":"chapter_viewmodel.png"}}}