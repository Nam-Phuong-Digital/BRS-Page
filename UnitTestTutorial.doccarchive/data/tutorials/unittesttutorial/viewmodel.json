{"metadata":{"title":"ViewModel","category":"Unit test with RxSwift","categoryPathComponent":"UnitTest-with-RxSwift","role":"project"},"variants":[{"paths":["\/tutorials\/unittesttutorial\/viewmodel"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"project","schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTest-with-RxSwift","doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTest-with-RxSwift\/$volume","doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTest-with-RxSwift\/UnitTest-with-ViewModel"]],"reference":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTest-with-RxSwift","modules":[{"projects":[{"reference":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTestTutorial\/ViewModel","sections":[{"reference":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTestTutorial\/ViewModel#Setup-and-write-first-test-method","kind":"task"}]}],"reference":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTest-with-RxSwift\/UnitTest-with-ViewModel"}]},"identifier":{"url":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTestTutorial\/ViewModel","interfaceLanguage":"swift"},"sections":[{"projectFiles":"InstallmentFee_VMTests.swift","content":[{"inlineContent":[{"type":"text","text":"When writing unit tests for view models using RxSwift, there are several key aspects to consider:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Setup"}],"type":"strong"},{"text":": Begin by setting up the test environment, including creating instances of the view model and any necessary dependencies. This may involve mocking or stubbing external dependencies, such as services or data sources.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Observables","type":"text"}],"type":"strong"},{"text":": View models often expose observables (or Subjects) representing state or data streams. In unit tests, subscribe to these observables and verify that they emit the expected values in response to certain inputs or conditions.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Schedulers"}]},{"type":"text","text":": RxSwift provides schedulers for controlling the execution context of observables. When testing view models, it’s essential to ensure that observables emit values on the correct schedulers, especially when dealing with asynchronous operations such as network requests."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Actions","type":"text"}]},{"text":": View models may contain methods or properties representing actions triggered by user interactions. In unit tests, simulate these interactions and verify that the view model behaves as expected in response.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Error Handling"}]},{"type":"text","text":": Test scenarios where observables emit errors and ensure that the view model handles them appropriately, whether by propagating them to the UI layer or handling them internally."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Completeness"}]},{"text":": Aim to achieve comprehensive test coverage, accounting for various edge cases, error scenarios, and boundary conditions. This ensures the reliability and robustness of the view model under different circumstances.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Mocking Dependencies"}]},{"type":"text","text":": Use mocking frameworks like RxTest or XCTest to mock dependencies and simulate their behavior. This allows for better isolation of the view model under test and ensures that tests focus solely on its logic."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Assertions"}],"type":"strong"},{"type":"text","text":": Make use of assertion methods provided by testing frameworks to validate the expected behavior of the view model. These assertions may include checking emitted values, ensuring proper error handling, and verifying interactions with dependencies."}]}]}],"type":"orderedList"}],"chapter":"UnitTest with ViewModel","kind":"hero","estimatedTimeInMinutes":20,"title":"ViewModel"},{"tasks":[{"title":"Setup and write first test method","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"In this tutorial, let’s write a test case for installment fee checking.","type":"text"}]},{"inlineContent":[{"type":"text","text":"We have three UI error states as below:"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"},{"kind":"columns","content":[{"media":"installmentfee-money-error.png","content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Money amount","type":"text"}]}]}],"kind":"contentAndMedia","mediaPosition":"trailing"},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Bank","type":"text"}]}],"type":"paragraph"}],"media":"installmentfee-bank-error.png","kind":"contentAndMedia","mediaPosition":"trailing"},{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Card number"}]}]}],"mediaPosition":"trailing","media":"installmentfee-card-error.png"}]}],"stepsSection":[{"type":"step","caption":[],"runtimePreview":"preview-viewmodel-1-setup-1.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a subclass of XCTestCase."}]}],"code":"viewmodel-1-setup-1.swift","media":null},{"caption":[{"inlineContent":[{"type":"text","text":"Here, we supply an ApiServiceMock and UserDefaultServiceMock to facilitate testing permissions and simulate error codes from the server."}],"type":"paragraph"},{"style":"tip","type":"aside","name":"Tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You should create mocks for all classes referenced in the test."}]}]}],"code":"viewmodel-1-setup-2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare all class objects needed for testing."}]}],"media":null,"runtimePreview":"preview-viewmodel-1-setup-2.png","type":"step"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare additional helper classes to support writing test cases for this view model."}]}],"media":null,"runtimePreview":"preview-viewmodel-1-setup-finish.png","type":"step","code":"viewmodel-1-setup-finish.swift"},{"media":null,"code":"viewmodel-2-write-1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, create a testInstallmentFee_MoneyAmount method."}]}],"runtimePreview":"preview-viewmodel-2-write-1.png","caption":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Test method name with the ‘test’ prefix is required."}]}],"name":"Tip","style":"tip","type":"aside"}],"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Declare a TestScheduler.","type":"text"}]}],"type":"step","caption":[{"content":[{"inlineContent":[{"text":"","type":"text"},{"type":"strong","inlineContent":[{"text":"TestScheduler","type":"text"}]},{"text":" is a powerful tool for writing reliable and deterministic unit tests for RxSwift code that involves time-dependent operations. It allows you to simulate time in a controlled environment, making testing of reactive code more robust and efficient.","type":"text"}],"type":"paragraph"}],"style":"tip","type":"aside","name":"Tip"}],"media":null,"runtimePreview":"preview-viewmodel-2-write-2.png","code":"viewmodel-2-write-2.swift"},{"type":"step","caption":[],"code":"viewmodel-2-write-3.swift","media":null,"runtimePreview":"preview-viewmodel-2-write-3.png","content":[{"type":"paragraph","inlineContent":[{"text":"Set up all necessary conditions to be able to check the money amount.","type":"text"}]}]},{"code":"viewmodel-2-write-4.swift","runtimePreview":"preview-viewmodel-2-write-4.png","caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"x","type":"text"}]},{"type":"text","text":" is represent user press the request button."},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"t"}]},{"type":"text","text":" is represent user input money amount."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"c"}]},{"text":" is represent user switch the In-store or Online tab.","type":"text"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"b"}],"type":"strong"},{"text":" is represent user select a bank.","type":"text"}],"type":"paragraph"}],"content":[{"inlineContent":[{"type":"text","text":"Declare an events inputs. It represents actions and inputs."}],"type":"paragraph"}],"media":null,"type":"step"},{"content":[{"inlineContent":[{"text":"Create an scheduler events timeline from the events inputs.","type":"text"}],"type":"paragraph"}],"media":null,"code":"viewmodel-2-write-5.swift","runtimePreview":"preview-viewmodel-2-write-5.png","type":"step","caption":[{"name":"Tip","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this context, there are more flows to test. We can break down the timeline into smaller parts."}]}],"type":"aside"}]},{"type":"step","caption":[{"type":"aside","name":"Tip","content":[{"inlineContent":[{"text":"We are should break down expected results follow events timeline.","type":"text"}],"type":"paragraph"}],"style":"tip"}],"content":[{"inlineContent":[{"type":"text","text":"Declare the expected result. Comments should match with the events timeline declared above to facilitate debugging."}],"type":"paragraph"}],"media":null,"code":"viewmodel-2-write-6.swift","runtimePreview":"preview-viewmodel-2-write-6.png"},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create a hot observable scheduler for input events and record the view model state. then ","type":"text"},{"inlineContent":[{"text":"start","type":"text"}],"type":"strong"},{"type":"text","text":" scheduler"}]}],"runtimePreview":"preview-viewmodel-2-write-7.png","code":"viewmodel-2-write-7.swift","caption":[{"inlineContent":[{"inlineContent":[{"text":"viewModel.getState","type":"text"}],"type":"strong"},{"type":"text","text":" should "},{"type":"strong","inlineContent":[{"type":"text","text":"skip(1)"}]},{"text":" to ignore initial value","type":"text"}],"type":"paragraph"},{"style":"tip","type":"aside","name":"Tip","content":[{"inlineContent":[{"type":"text","text":"Add "},{"inlineContent":[{"text":"debug()","type":"text"}],"type":"strong"},{"text":" to observe scheduler emit inputs also ","type":"text"},{"inlineContent":[{"type":"text","text":"viewModel.getState"}],"type":"strong"}],"type":"paragraph"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Compare record events from scheduler with expected results.","type":"text"}]}],"code":"viewmodel-2-write-8.swift","type":"step","media":null,"runtimePreview":"preview-viewmodel-2-write-8.png","caption":[]}],"anchor":"Setup-and-write-first-test-method"}],"kind":"tasks"}],"references":{"viewmodel-2-write-8.swift":{"fileType":"swift","fileName":"InstallmentFee_VMTests.swift","content":["\/\/","\/\/  InstallmentFee_VMTests.swift","\/\/  PayooMerchantTests","\/\/","\/\/  Created by Dai Pham on 25\/4\/24.","\/\/  Copyright © 2024 VietUnion. All rights reserved.","\/\/","","import XCTest","import RxSwift","import RxTest","import RxCocoa","import Domain","@testable import PayooMerchant","","final class InstallmentFee_VMTests: XCTestCase {","","    let userDefaultMock = UserDefaultsService_InstallmentFee_Mock()","    lazy var viewModel:InstallmentFeeViewModel = .init(","        bankUC: InstallmentBankUseCase(apiService: ApiServiceMock()),","        feeUC: InstallmentFeeChargeUseCase(apiService: ApiServiceMock()),","        shopUC: InstallmentShopUseCase(apiService: ApiServiceMock()),","        sessionUC: container.resolve(SessionUseCase.self)!,","        featureUC: FeaturesUseCase(userDefaultsService: userDefaultMock, profileUC: container.resolve(ProfileUseCase.self)!)","    )","    ","    let events = [\"x\": ()] \/\/ simulate user press request button","    ","    var disposeBag = DisposeBag()","    ","    override func setUpWithError() throws {","        \/\/ Put setup code here. This method is called before the invocation of each test method in the class.","        userDefaultMock.permission = [.installmentFeeCheckOnline,.installmentFeeCheckInStore]","        viewModel.banks = [.stb,.vib]","        viewModel.shops = [.shop1,.shop2]","        viewModel.periods.accept([3]) \/\/ default 3","        viewModel.viewDidLoad()","    }","","    override func tearDownWithError() throws {","        \/\/ Put teardown code here. This method is called after the invocation of each test method in the class.","        viewModel.reset()","        disposeBag = DisposeBag()","    }","    ","    func testInstallmentFee_MoneyAmount() {","        ","        let scheduler = TestScheduler(initialClock: 0, resolution: 0, simulateProcessingDelay: true)","        ","        \/\/ Set up all valid conditions to check the validation of a money amount.","        viewModel.currentSelectedBank.accept(.stb)","        viewModel.currentSelectedShop.accept(.shop1)","        viewModel.currentSelectedShopDomain.accept(Shop.shop1.shopDomains.first)","        ","        let events:[String: Any?] = [","            \/\/ x represents the action when the request button is pressed.","            \"x\": (),","            \/\/ All keys with the prefix 't' represent the action when the user inputs the money amount.","            \"t0\": nil,","            \"t\": Double(500_000),","            \"t1\": Double(510_000),","            \"t2\": Double(5_000_000),","            \"t4\": Double(1_000_000),","            \"t5\": Double(1_100_000_000),","            \/\/ All keys with prefix 'c' represent the action when the user select installment type","            \"c\": InstallmentFeeCheckingType.counter,","            \"c1\": InstallmentFeeCheckingType.online,","            \/\/ All keys with the prefix 'b' represent the action when the user select a bank","            \"b\" : InstallmentBank.stb,","            \"b1\": InstallmentBank.vib","        ]","        ","        let setupEvents: [String] = [","            \/\/ Case 1. Validate that the money amount has been inputted.","            \"x-t-x-t1-x-t2-x-t0-x\",","            \/\/ Case 2. Validate that the money amount inputed with installment fee type online","            \"c1-t0-b-x-t-x-t2-x-b1-t4-x-t5-x\"","        ]","        \/\/ Set up events and times.","        let scheduleEvents = scheduler.parseEventsAndTimes(","            timeline:  setupEvents.joined(separator: \"-\") + \"--\",","            values: events","        ).first!","        ","        let expectedCase1: [InstallmentFeeChargeState] = [","            \/\/ Press the request button.","            .prepare,","            .error(BaseError()),","            \/\/ Press the request button with the money amount set to t.","            .prepare,","            .haveFee,","            \/\/ Press the request button with the money amount set to t1.","            .prepare,","            .haveFee,","            \/\/ Press the request button with the money amount set to t2.","            .prepare,","            .haveFee,","            \/\/ Press the request button with the money amount set to t0.","            .prepare,","            .error(BaseError())","        ]","        ","        let expectedCase2: [InstallmentFeeChargeState] = [","            \/\/ change to installment type online","            .prepare,","            \/\/ input: type counter, money amount set to nil, select a bank then press the request button.","            .prepare,","            .error(BaseError()),","            \/\/ Input: money amount: t then press the request button.","            .prepare,","            .error(BaseError(\"money < min supported\")),","            \/\/ Press the request button with the money amount set to t2.","            .prepare,","            .haveFee,","            \/\/ Select another bank and input money amount t4 then press the request button.","            .prepare,","            .error(BaseError(\"money < min supported\")),","            \/\/ Select another bank and input money amount t5 then press the request button.","            .prepare,","            .error(BaseError(\"money > max supported\"))","        ]","        ","        let expected =","        expectedCase1 +","        expectedCase2","        ","        \/\/ Observable events timeline.","        scheduler.createHotObservable(scheduleEvents)","            .debug(\"🔤\")","            .subscribe(onNext: {[unowned self] input in","                if input is Void {","                    self.viewModel.getInstallmentFeeCharge()","                } else if let bank = input as? InstallmentBank {","                    self.viewModel.currentSelectedBank.accept(bank)","                } else if let shop = input as? Shop {","                    self.viewModel.currentSelectedShop.accept(shop)","                } else if let type = input as? InstallmentFeeCheckingType {","                    self.viewModel.installmentCheckingFeeType.accept(type)","                } else {","                    let number = input as? Double","                    self.viewModel.currentAmount.accept(number)","                }","            })","            .disposed(by: self.disposeBag)","","        \/\/ skip initial value so add .skip(1)","        let record = scheduler.record(source: viewModel.getState().debug(\"🧨\").map({ $0?.name }).asObservable().skip(1))","        scheduler.start()","        ","        \/\/ The expected result count matches the expected count.","        XCTAssert(","            record.events.count == expected.count,","            \"The result count(\\(record.events.count)) does not match the expected result(\\(expected.count))\"","        )","        ","        \/\/ Compare results with expected results.","        let t = record.events.compactMap({ $0.value.element })","        zip(t, expected)","            .enumerated()","            .forEach { (i,element) in","                let (s,e) = element","                XCTAssert(","                    s?.note == e.note ,","                    \"Case \\(i + 1): \\(String(describing: s?.note)) == \\(e.note)\"","                )","            }","    }","}","","let MONEY_AMOUNT_9026:Double = 9_026_000","let MONEY_AMOUNT_3501:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireInputMoreTheFirstNumberCard)","let MONEY_AMOUNT_3502:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireChoseAConversationFee)","let MONEY_AMOUNT_3503:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotSupported)","let MONEY_AMOUNT_3504:Double = Double(InstallmentFeeMoneyWithErrorMock.BelowMin)","let MONEY_AMOUNT_3505:Double = Double(InstallmentFeeMoneyWithErrorMock.AboveMax)","let MONEY_AMOUNT_3506:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotBelongToBank)","let MONEY_AMOUNT_3507:Double = Double(InstallmentFeeMoneyWithErrorMock.SupportPeriodNotSupported)","let MONEY_AMOUNT_FOR_CARD_BELONG_TO_ANOTHER_BANK:Double = Double(InstallmentFeeMoneyWithErrorMock.CardBelongToAnotherBank)","let MONEY_AMOUNT_FOR_ERROR_1:Double = Double(InstallmentFeeMoneyWithErrorMock.DefaultError)","","fileprivate enum InstallmentFeeMoneyWithErrorMock {","    static let RequireInputMoreTheFirstNumberCard = 3_501_000","    static let RequireChoseAConversationFee = 3_502_000","    static let CardNotSupported = 3_503_000","    static let BelowMin = 3_504_000","    static let AboveMax = 3_505_000","    static let CardNotBelongToBank = 3_506_000","    static let SupportPeriodNotSupported = 3_507_000","    ","    static let DefaultError = 3_170_000 \/\/ purpose error -1","    static let CardBelongToAnotherBank = 3_180_000 \/\/ add to check card not belong to current bank","}","","\/\/ MARK: -  Private function","private extension InstallmentFee_VMTests {","    ","    func getFeeCharge(","        type: InstallmentFeeCheckingType,","        amount: Double,","        bankCode: String,","        cardNoPrefix: String?,","        periods: [Int],","        installmentConversionFee: String?,","        shopId: Double?,","        shopDomain: String?","    ) -> Observable<Result<[InstallmentFeeCharge],BaseError>> {","        Observable.create {[weak self] ob in","            guard let self else {","                ob.onCompleted()","                return Disposables.create()","            }","            self.viewModel.feeUC.getInstallmentFeeCharge(type: type, amount: amount, bankCode: bankCode, cardNoPrefix: cardNoPrefix, periods: periods, installmentConversionFee: installmentConversionFee, shopId: shopId, shopDomain: shopDomain)","                .asObservable()","                .subscribe(onNext: {","                    ob.onNext(.success($0))","                }, onError: { error in","                    if let error = error as? BaseError {","                        ob.onNext(.failure(error))","                    } else {","                        ob.onCompleted()","                    }","                })","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","    ","    func validate(","        type: InstallmentFeeCheckingType,","        money: Double?,","        card: String?,","        period: [Int],","        shop: Domain.Shop?,","        shopDomain: String?,","        bank: InstallmentBank?","    ) -> Observable<Result<Void, Error>>{","        let data: InstallmentFeeChargeUseCase.DataChainGetBanksResponse = (","            [],[], shop, shopDomain, bank, type, money, card, period, nil \/\/ conversationFee","        )","        return Observable.create {[unowned self] ob in","            self.viewModel.feeUC.validate(data)","                .asObservable()","                .subscribe { _ in","                    ob.onNext(.success(()))","                } onError: { error in","                    ob.onNext(.failure(error))","                }","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","}","","extension Domain.PeriodSupport {","    public var debugDescription: String {","        return \"period: \\(period) - min: \\(minPayment) - max: \\(maxPayment)\"","    }","    ","    static var three: Domain.PeriodSupport {","        .init(period: 3, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var six: Domain.PeriodSupport {","        .init(period: 6, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var nine: Domain.PeriodSupport {","        .init(period: 9, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var thirtySix: Domain.PeriodSupport {","        .init(period: 36, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","}","","extension InstallmentBank {","    static var stb: InstallmentBank {","        .init(bankCode: \"STB\", bankName: \"Sacombank\", periodSupports: [.three, .six, .nine, .thirtySix], bankLogoUrl: \"\")","    }","    ","    static var vib: InstallmentBank {","        .init(bankCode: \"VIB\", bankName: \"VietInbank\", periodSupports: [.three, .six, .nine], bankLogoUrl: \"\")","    }","}","","extension Domain.Shop {","    static var shop1: Domain.Shop {","        .init(shopId: 100, shopDomains: [\"https:\/\/shops1.com.vn\"], emailShop: nil, shopName: \"Shop one\")","    }","    static var shop2: Domain.Shop {","        .init(shopId: 200, shopDomains: [\"https:\/\/shops2.com.vn\"], emailShop: nil, shopName: \"Shop two\")","    }","}","","extension InstallmentFeeChargeState: Equatable {","    public static func == (lhs: PayooMerchant.InstallmentFeeChargeState, rhs: PayooMerchant.InstallmentFeeChargeState) -> Bool {","        lhs.note == rhs.note","    }","    ","    public var note: String {","        switch self {","        case .prepare:","            \"prepare\"","        case .haveNoPermission:","            \"haveNoPermission\"","        case .noFee:","            \"noFee\"","        case .notice(message: let message):","            \"notice\"","        case .haveFee:","            \"haveFee\"","        case .error(_):","            \"error\"","        }","    }","}"],"syntax":"swift","identifier":"viewmodel-2-write-8.swift","type":"file","highlights":[{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":163},{"line":164},{"line":165},{"line":166}]},"preview-viewmodel-2-write-5.png":{"identifier":"preview-viewmodel-2-write-5.png","alt":"Create an scheduler events timeline","variants":[{"traits":["1x","light"],"url":"\/images\/preview-viewmodel-2-write-5.png"}],"type":"image"},"preview-viewmodel-2-write-7.png":{"identifier":"preview-viewmodel-2-write-7.png","variants":[{"traits":["1x","light"],"url":"\/images\/preview-viewmodel-2-write-7.png"}],"type":"image","alt":"Create a hot observable scheduler"},"viewmodel-2-write-5.swift":{"identifier":"viewmodel-2-write-5.swift","content":["\/\/","\/\/  InstallmentFee_VMTests.swift","\/\/  PayooMerchantTests","\/\/","\/\/  Created by Dai Pham on 25\/4\/24.","\/\/  Copyright © 2024 VietUnion. All rights reserved.","\/\/","","import XCTest","import RxSwift","import RxTest","import RxCocoa","import Domain","@testable import PayooMerchant","","final class InstallmentFee_VMTests: XCTestCase {","","    let userDefaultMock = UserDefaultsService_InstallmentFee_Mock()","    lazy var viewModel:InstallmentFeeViewModel = .init(","        bankUC: InstallmentBankUseCase(apiService: ApiServiceMock()),","        feeUC: InstallmentFeeChargeUseCase(apiService: ApiServiceMock()),","        shopUC: InstallmentShopUseCase(apiService: ApiServiceMock()),","        sessionUC: container.resolve(SessionUseCase.self)!,","        featureUC: FeaturesUseCase(userDefaultsService: userDefaultMock, profileUC: container.resolve(ProfileUseCase.self)!)","    )","    ","    let events = [\"x\": ()] \/\/ simulate user press request button","    ","    var disposeBag = DisposeBag()","    ","    override func setUpWithError() throws {","        \/\/ Put setup code here. This method is called before the invocation of each test method in the class.","        userDefaultMock.permission = [.installmentFeeCheckOnline,.installmentFeeCheckInStore]","        viewModel.banks = [.stb,.vib]","        viewModel.shops = [.shop1,.shop2]","        viewModel.periods.accept([3]) \/\/ default 3","        viewModel.viewDidLoad()","    }","","    override func tearDownWithError() throws {","        \/\/ Put teardown code here. This method is called after the invocation of each test method in the class.","        viewModel.reset()","        disposeBag = DisposeBag()","    }","    ","    func testInstallmentFee_MoneyAmount() {","        ","        let scheduler = TestScheduler(initialClock: 0, resolution: 0, simulateProcessingDelay: true)","        ","        \/\/ Set up all valid conditions to check the validation of a money amount.","        viewModel.currentSelectedBank.accept(.stb)","        viewModel.currentSelectedShop.accept(.shop1)","        viewModel.currentSelectedShopDomain.accept(Shop.shop1.shopDomains.first)","        ","        let events:[String: Any?] = [","            \/\/ x represents the action when the request button is pressed.","            \"x\": (),","            \/\/ All keys with the prefix 't' represent the action when the user inputs the money amount.","            \"t0\": nil,","            \"t\": Double(500_000),","            \"t1\": Double(510_000),","            \"t2\": Double(5_000_000),","            \"t4\": Double(1_000_000),","            \"t5\": Double(1_100_000_000),","            \/\/ All keys with prefix 'c' represent the action when the user select installment type","            \"c\": InstallmentFeeCheckingType.counter,","            \"c1\": InstallmentFeeCheckingType.online,","            \/\/ All keys with the prefix 'b' represent the action when the user select a bank","            \"b\" : InstallmentBank.stb,","            \"b1\": InstallmentBank.vib","        ]","        ","        let setupEvents: [String] = [","            \/\/ Case 1. Validate that the money amount has been inputted.","            \"x-t-x-t1-x-t2-x-t0-x\",","            \/\/ Case 2. Validate that the money amount inputed with installment fee type online","            \"c1-t0-b-x-t-x-t2-x-b1-t4-x-t5-x\"","        ]","        \/\/ Set up events and times.","        let scheduleEvents = scheduler.parseEventsAndTimes(","            timeline:  setupEvents.joined(separator: \"-\") + \"--\",","            values: events","        ).first!","    }","}","","let MONEY_AMOUNT_9026:Double = 9_026_000","let MONEY_AMOUNT_3501:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireInputMoreTheFirstNumberCard)","let MONEY_AMOUNT_3502:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireChoseAConversationFee)","let MONEY_AMOUNT_3503:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotSupported)","let MONEY_AMOUNT_3504:Double = Double(InstallmentFeeMoneyWithErrorMock.BelowMin)","let MONEY_AMOUNT_3505:Double = Double(InstallmentFeeMoneyWithErrorMock.AboveMax)","let MONEY_AMOUNT_3506:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotBelongToBank)","let MONEY_AMOUNT_3507:Double = Double(InstallmentFeeMoneyWithErrorMock.SupportPeriodNotSupported)","let MONEY_AMOUNT_FOR_CARD_BELONG_TO_ANOTHER_BANK:Double = Double(InstallmentFeeMoneyWithErrorMock.CardBelongToAnotherBank)","let MONEY_AMOUNT_FOR_ERROR_1:Double = Double(InstallmentFeeMoneyWithErrorMock.DefaultError)","","fileprivate enum InstallmentFeeMoneyWithErrorMock {","    static let RequireInputMoreTheFirstNumberCard = 3_501_000","    static let RequireChoseAConversationFee = 3_502_000","    static let CardNotSupported = 3_503_000","    static let BelowMin = 3_504_000","    static let AboveMax = 3_505_000","    static let CardNotBelongToBank = 3_506_000","    static let SupportPeriodNotSupported = 3_507_000","    ","    static let DefaultError = 3_170_000 \/\/ purpose error -1","    static let CardBelongToAnotherBank = 3_180_000 \/\/ add to check card not belong to current bank","}","","\/\/ MARK: -  Private function","private extension InstallmentFee_VMTests {","    ","    func getFeeCharge(","        type: InstallmentFeeCheckingType,","        amount: Double,","        bankCode: String,","        cardNoPrefix: String?,","        periods: [Int],","        installmentConversionFee: String?,","        shopId: Double?,","        shopDomain: String?","    ) -> Observable<Result<[InstallmentFeeCharge],BaseError>> {","        Observable.create {[weak self] ob in","            guard let self else {","                ob.onCompleted()","                return Disposables.create()","            }","            self.viewModel.feeUC.getInstallmentFeeCharge(type: type, amount: amount, bankCode: bankCode, cardNoPrefix: cardNoPrefix, periods: periods, installmentConversionFee: installmentConversionFee, shopId: shopId, shopDomain: shopDomain)","                .asObservable()","                .subscribe(onNext: {","                    ob.onNext(.success($0))","                }, onError: { error in","                    if let error = error as? BaseError {","                        ob.onNext(.failure(error))","                    } else {","                        ob.onCompleted()","                    }","                })","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","    ","    func validate(","        type: InstallmentFeeCheckingType,","        money: Double?,","        card: String?,","        period: [Int],","        shop: Domain.Shop?,","        shopDomain: String?,","        bank: InstallmentBank?","    ) -> Observable<Result<Void, Error>>{","        let data: InstallmentFeeChargeUseCase.DataChainGetBanksResponse = (","            [],[], shop, shopDomain, bank, type, money, card, period, nil \/\/ conversationFee","        )","        return Observable.create {[unowned self] ob in","            self.viewModel.feeUC.validate(data)","                .asObservable()","                .subscribe { _ in","                    ob.onNext(.success(()))","                } onError: { error in","                    ob.onNext(.failure(error))","                }","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","}","","extension Domain.PeriodSupport {","    public var debugDescription: String {","        return \"period: \\(period) - min: \\(minPayment) - max: \\(maxPayment)\"","    }","    ","    static var three: Domain.PeriodSupport {","        .init(period: 3, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var six: Domain.PeriodSupport {","        .init(period: 6, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var nine: Domain.PeriodSupport {","        .init(period: 9, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var thirtySix: Domain.PeriodSupport {","        .init(period: 36, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","}","","extension InstallmentBank {","    static var stb: InstallmentBank {","        .init(bankCode: \"STB\", bankName: \"Sacombank\", periodSupports: [.three, .six, .nine, .thirtySix], bankLogoUrl: \"\")","    }","    ","    static var vib: InstallmentBank {","        .init(bankCode: \"VIB\", bankName: \"VietInbank\", periodSupports: [.three, .six, .nine], bankLogoUrl: \"\")","    }","}","","extension Domain.Shop {","    static var shop1: Domain.Shop {","        .init(shopId: 100, shopDomains: [\"https:\/\/shops1.com.vn\"], emailShop: nil, shopName: \"Shop one\")","    }","    static var shop2: Domain.Shop {","        .init(shopId: 200, shopDomains: [\"https:\/\/shops2.com.vn\"], emailShop: nil, shopName: \"Shop two\")","    }","}","","extension InstallmentFeeChargeState: Equatable {","    public static func == (lhs: PayooMerchant.InstallmentFeeChargeState, rhs: PayooMerchant.InstallmentFeeChargeState) -> Bool {","        lhs.note == rhs.note","    }","    ","    public var note: String {","        switch self {","        case .prepare:","            \"prepare\"","        case .haveNoPermission:","            \"haveNoPermission\"","        case .noFee:","            \"noFee\"","        case .notice(message: let message):","            \"notice\"","        case .haveFee:","            \"haveFee\"","        case .error(_):","            \"error\"","        }","    }","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83}],"type":"file","fileName":"InstallmentFee_VMTests.swift"},"preview-viewmodel-2-write-3.png":{"identifier":"preview-viewmodel-2-write-3.png","variants":[{"traits":["1x","light"],"url":"\/images\/preview-viewmodel-2-write-3.png"}],"type":"image","alt":"Set up all necessary conditions"},"installmentfee-bank-error.png":{"identifier":"installmentfee-bank-error.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/installmentfee-bank-error.png"}],"type":"image"},"viewmodel-2-write-2.swift":{"identifier":"viewmodel-2-write-2.swift","content":["\/\/","\/\/  InstallmentFee_VMTests.swift","\/\/  PayooMerchantTests","\/\/","\/\/  Created by Dai Pham on 25\/4\/24.","\/\/  Copyright © 2024 VietUnion. All rights reserved.","\/\/","","import XCTest","import RxSwift","import RxTest","import RxCocoa","import Domain","@testable import PayooMerchant","","final class InstallmentFee_VMTests: XCTestCase {","","    let userDefaultMock = UserDefaultsService_InstallmentFee_Mock()","    lazy var viewModel:InstallmentFeeViewModel = .init(","        bankUC: InstallmentBankUseCase(apiService: ApiServiceMock()),","        feeUC: InstallmentFeeChargeUseCase(apiService: ApiServiceMock()),","        shopUC: InstallmentShopUseCase(apiService: ApiServiceMock()),","        sessionUC: container.resolve(SessionUseCase.self)!,","        featureUC: FeaturesUseCase(userDefaultsService: userDefaultMock, profileUC: container.resolve(ProfileUseCase.self)!)","    )","    ","    let events = [\"x\": ()] \/\/ simulate user press request button","    ","    var disposeBag = DisposeBag()","    ","    override func setUpWithError() throws {","        \/\/ Put setup code here. This method is called before the invocation of each test method in the class.","        userDefaultMock.permission = [.installmentFeeCheckOnline,.installmentFeeCheckInStore]","        viewModel.banks = [.stb,.vib]","        viewModel.shops = [.shop1,.shop2]","        viewModel.periods.accept([3]) \/\/ default 3","        viewModel.viewDidLoad()","    }","","    override func tearDownWithError() throws {","        \/\/ Put teardown code here. This method is called after the invocation of each test method in the class.","        viewModel.reset()","        disposeBag = DisposeBag()","    }","    ","    func testInstallmentFee_MoneyAmount() {","        ","        let scheduler = TestScheduler(initialClock: 0, resolution: 0, simulateProcessingDelay: true)","        ","    }","}","","let MONEY_AMOUNT_9026:Double = 9_026_000","let MONEY_AMOUNT_3501:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireInputMoreTheFirstNumberCard)","let MONEY_AMOUNT_3502:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireChoseAConversationFee)","let MONEY_AMOUNT_3503:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotSupported)","let MONEY_AMOUNT_3504:Double = Double(InstallmentFeeMoneyWithErrorMock.BelowMin)","let MONEY_AMOUNT_3505:Double = Double(InstallmentFeeMoneyWithErrorMock.AboveMax)","let MONEY_AMOUNT_3506:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotBelongToBank)","let MONEY_AMOUNT_3507:Double = Double(InstallmentFeeMoneyWithErrorMock.SupportPeriodNotSupported)","let MONEY_AMOUNT_FOR_CARD_BELONG_TO_ANOTHER_BANK:Double = Double(InstallmentFeeMoneyWithErrorMock.CardBelongToAnotherBank)","let MONEY_AMOUNT_FOR_ERROR_1:Double = Double(InstallmentFeeMoneyWithErrorMock.DefaultError)","","fileprivate enum InstallmentFeeMoneyWithErrorMock {","    static let RequireInputMoreTheFirstNumberCard = 3_501_000","    static let RequireChoseAConversationFee = 3_502_000","    static let CardNotSupported = 3_503_000","    static let BelowMin = 3_504_000","    static let AboveMax = 3_505_000","    static let CardNotBelongToBank = 3_506_000","    static let SupportPeriodNotSupported = 3_507_000","    ","    static let DefaultError = 3_170_000 \/\/ purpose error -1","    static let CardBelongToAnotherBank = 3_180_000 \/\/ add to check card not belong to current bank","}","","\/\/ MARK: -  Private function","private extension InstallmentFee_VMTests {","    ","    func getFeeCharge(","        type: InstallmentFeeCheckingType,","        amount: Double,","        bankCode: String,","        cardNoPrefix: String?,","        periods: [Int],","        installmentConversionFee: String?,","        shopId: Double?,","        shopDomain: String?","    ) -> Observable<Result<[InstallmentFeeCharge],BaseError>> {","        Observable.create {[weak self] ob in","            guard let self else {","                ob.onCompleted()","                return Disposables.create()","            }","            self.viewModel.feeUC.getInstallmentFeeCharge(type: type, amount: amount, bankCode: bankCode, cardNoPrefix: cardNoPrefix, periods: periods, installmentConversionFee: installmentConversionFee, shopId: shopId, shopDomain: shopDomain)","                .asObservable()","                .subscribe(onNext: {","                    ob.onNext(.success($0))","                }, onError: { error in","                    if let error = error as? BaseError {","                        ob.onNext(.failure(error))","                    } else {","                        ob.onCompleted()","                    }","                })","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","    ","    func validate(","        type: InstallmentFeeCheckingType,","        money: Double?,","        card: String?,","        period: [Int],","        shop: Domain.Shop?,","        shopDomain: String?,","        bank: InstallmentBank?","    ) -> Observable<Result<Void, Error>>{","        let data: InstallmentFeeChargeUseCase.DataChainGetBanksResponse = (","            [],[], shop, shopDomain, bank, type, money, card, period, nil \/\/ conversationFee","        )","        return Observable.create {[unowned self] ob in","            self.viewModel.feeUC.validate(data)","                .asObservable()","                .subscribe { _ in","                    ob.onNext(.success(()))","                } onError: { error in","                    ob.onNext(.failure(error))","                }","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","}","","extension Domain.PeriodSupport {","    public var debugDescription: String {","        return \"period: \\(period) - min: \\(minPayment) - max: \\(maxPayment)\"","    }","    ","    static var three: Domain.PeriodSupport {","        .init(period: 3, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var six: Domain.PeriodSupport {","        .init(period: 6, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var nine: Domain.PeriodSupport {","        .init(period: 9, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var thirtySix: Domain.PeriodSupport {","        .init(period: 36, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","}","","extension InstallmentBank {","    static var stb: InstallmentBank {","        .init(bankCode: \"STB\", bankName: \"Sacombank\", periodSupports: [.three, .six, .nine, .thirtySix], bankLogoUrl: \"\")","    }","    ","    static var vib: InstallmentBank {","        .init(bankCode: \"VIB\", bankName: \"VietInbank\", periodSupports: [.three, .six, .nine], bankLogoUrl: \"\")","    }","}","","extension Domain.Shop {","    static var shop1: Domain.Shop {","        .init(shopId: 100, shopDomains: [\"https:\/\/shops1.com.vn\"], emailShop: nil, shopName: \"Shop one\")","    }","    static var shop2: Domain.Shop {","        .init(shopId: 200, shopDomains: [\"https:\/\/shops2.com.vn\"], emailShop: nil, shopName: \"Shop two\")","    }","}","","extension InstallmentFeeChargeState: Equatable {","    public static func == (lhs: PayooMerchant.InstallmentFeeChargeState, rhs: PayooMerchant.InstallmentFeeChargeState) -> Bool {","        lhs.note == rhs.note","    }","    ","    public var note: String {","        switch self {","        case .prepare:","            \"prepare\"","        case .haveNoPermission:","            \"haveNoPermission\"","        case .noFee:","            \"noFee\"","        case .notice(message: let message):","            \"notice\"","        case .haveFee:","            \"haveFee\"","        case .error(_):","            \"error\"","        }","    }","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":48},{"line":49}],"type":"file","fileName":"InstallmentFee_VMTests.swift"},"preview-viewmodel-2-write-1.png":{"identifier":"preview-viewmodel-2-write-1.png","alt":"create a testInstallmentFee_MoneyAmount method","variants":[{"traits":["1x","light"],"url":"\/images\/preview-viewmodel-2-write-1.png"}],"type":"image"},"doc://com.example.UnitTestTutorial/tutorials/UnitTest-with-RxSwift":{"type":"topic","abstract":[{"type":"text","text":"Unit testing in Swift involves breaking down code into small, testable components known as units. These units could be functions, methods, or even entire classes. By isolating these units and subjecting them to various scenarios, developers can assert the expected behavior and uncover potential bugs or regressions."}],"url":"\/tutorials\/unittest-with-rxswift","kind":"overview","title":"Unit Tests","role":"overview","identifier":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTest-with-RxSwift"},"doc://com.example.UnitTestTutorial/tutorials/UnitTestTutorial/ViewModel":{"abstract":[{"type":"text","text":"When writing unit tests for view models using RxSwift, there are several key aspects to consider:"}],"type":"topic","url":"\/tutorials\/unittesttutorial\/viewmodel","kind":"project","estimatedTime":"20min","title":"ViewModel","role":"project","identifier":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTestTutorial\/ViewModel"},"preview-viewmodel-1-setup-2.png":{"identifier":"preview-viewmodel-1-setup-2.png","variants":[{"traits":["1x","light"],"url":"\/images\/preview-viewmodel-1-setup-2.png"}],"type":"image","alt":"Declare all class objects needed for testing."},"preview-viewmodel-2-write-6.png":{"identifier":"preview-viewmodel-2-write-6.png","alt":"Declare the expected result","variants":[{"traits":["1x","light"],"url":"\/images\/preview-viewmodel-2-write-6.png"}],"type":"image"},"preview-viewmodel-2-write-8.png":{"identifier":"preview-viewmodel-2-write-8.png","variants":[{"traits":["1x","light"],"url":"\/images\/preview-viewmodel-2-write-8.png"}],"type":"image","alt":"Create a hot observable scheduler"},"viewmodel-1-setup-1.swift":{"identifier":"viewmodel-1-setup-1.swift","content":["\/\/","\/\/  InstallmentFee_VMTests.swift","\/\/  PayooMerchantTests","\/\/","\/\/  Created by Dai Pham on 25\/4\/24.","\/\/  Copyright © 2024 VietUnion. All rights reserved.","\/\/","","import XCTest","import RxSwift","import RxTest","import RxCocoa","import Domain","@testable import PayooMerchant","","final class InstallmentFee_VMTests: XCTestCase {","   ","}"],"highlights":[],"fileType":"swift","fileName":"InstallmentFee_VMTests.swift","syntax":"swift","type":"file"},"preview-viewmodel-2-write-2.png":{"identifier":"preview-viewmodel-2-write-2.png","variants":[{"traits":["1x","light"],"url":"\/images\/preview-viewmodel-2-write-2.png"}],"type":"image","alt":"Declare a TestScheduler"},"installmentfee-money-error.png":{"identifier":"installmentfee-money-error.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/installmentfee-money-error.png"}],"type":"image"},"preview-viewmodel-2-write-4.png":{"identifier":"preview-viewmodel-2-write-4.png","variants":[{"traits":["1x","light"],"url":"\/images\/preview-viewmodel-2-write-4.png"}],"type":"image","alt":"Declare an events inputs"},"viewmodel-2-write-6.swift":{"fileName":"InstallmentFee_VMTests.swift","highlights":[{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126}],"fileType":"swift","identifier":"viewmodel-2-write-6.swift","syntax":"swift","type":"file","content":["\/\/","\/\/  InstallmentFee_VMTests.swift","\/\/  PayooMerchantTests","\/\/","\/\/  Created by Dai Pham on 25\/4\/24.","\/\/  Copyright © 2024 VietUnion. All rights reserved.","\/\/","","import XCTest","import RxSwift","import RxTest","import RxCocoa","import Domain","@testable import PayooMerchant","","final class InstallmentFee_VMTests: XCTestCase {","","    let userDefaultMock = UserDefaultsService_InstallmentFee_Mock()","    lazy var viewModel:InstallmentFeeViewModel = .init(","        bankUC: InstallmentBankUseCase(apiService: ApiServiceMock()),","        feeUC: InstallmentFeeChargeUseCase(apiService: ApiServiceMock()),","        shopUC: InstallmentShopUseCase(apiService: ApiServiceMock()),","        sessionUC: container.resolve(SessionUseCase.self)!,","        featureUC: FeaturesUseCase(userDefaultsService: userDefaultMock, profileUC: container.resolve(ProfileUseCase.self)!)","    )","    ","    let events = [\"x\": ()] \/\/ simulate user press request button","    ","    var disposeBag = DisposeBag()","    ","    override func setUpWithError() throws {","        \/\/ Put setup code here. This method is called before the invocation of each test method in the class.","        userDefaultMock.permission = [.installmentFeeCheckOnline,.installmentFeeCheckInStore]","        viewModel.banks = [.stb,.vib]","        viewModel.shops = [.shop1,.shop2]","        viewModel.periods.accept([3]) \/\/ default 3","        viewModel.viewDidLoad()","    }","","    override func tearDownWithError() throws {","        \/\/ Put teardown code here. This method is called after the invocation of each test method in the class.","        viewModel.reset()","        disposeBag = DisposeBag()","    }","    ","    func testInstallmentFee_MoneyAmount() {","        ","        let scheduler = TestScheduler(initialClock: 0, resolution: 0, simulateProcessingDelay: true)","        ","        \/\/ Set up all valid conditions to check the validation of a money amount.","        viewModel.currentSelectedBank.accept(.stb)","        viewModel.currentSelectedShop.accept(.shop1)","        viewModel.currentSelectedShopDomain.accept(Shop.shop1.shopDomains.first)","        ","        let events:[String: Any?] = [","            \/\/ x represents the action when the request button is pressed.","            \"x\": (),","            \/\/ All keys with the prefix 't' represent the action when the user inputs the money amount.","            \"t0\": nil,","            \"t\": Double(500_000),","            \"t1\": Double(510_000),","            \"t2\": Double(5_000_000),","            \"t4\": Double(1_000_000),","            \"t5\": Double(1_100_000_000),","            \/\/ All keys with prefix 'c' represent the action when the user select installment type","            \"c\": InstallmentFeeCheckingType.counter,","            \"c1\": InstallmentFeeCheckingType.online,","            \/\/ All keys with the prefix 'b' represent the action when the user select a bank","            \"b\" : InstallmentBank.stb,","            \"b1\": InstallmentBank.vib","        ]","        ","        let setupEvents: [String] = [","            \/\/ Case 1. Validate that the money amount has been inputted.","            \"x-t-x-t1-x-t2-x-t0-x\",","            \/\/ Case 2. Validate that the money amount inputed with installment fee type online","            \"c1-t0-b-x-t-x-t2-x-b1-t4-x-t5-x\"","        ]","        \/\/ Set up events and times.","        let scheduleEvents = scheduler.parseEventsAndTimes(","            timeline:  setupEvents.joined(separator: \"-\") + \"--\",","            values: events","        ).first!","        ","        let expectedCase1: [InstallmentFeeChargeState] = [","            \/\/ Press the request button.","            .prepare,","            .error(BaseError()),","            \/\/ Press the request button with the money amount set to t.","            .prepare,","            .haveFee,","            \/\/ Press the request button with the money amount set to t1.","            .prepare,","            .haveFee,","            \/\/ Press the request button with the money amount set to t2.","            .prepare,","            .haveFee,","            \/\/ Press the request button with the money amount set to t0.","            .prepare,","            .error(BaseError())","        ]","        ","        let expectedCase2: [InstallmentFeeChargeState] = [","            \/\/ change to installment type online","            .prepare,","            \/\/ input: type counter, money amount set to nil, select a bank then press the request button.","            .prepare,","            .error(BaseError()),","            \/\/ Input: money amount: t then press the request button.","            .prepare,","            .error(BaseError(\"money < min supported\")),","            \/\/ Press the request button with the money amount set to t2.","            .prepare,","            .haveFee,","            \/\/ Select another bank and input money amount t4 then press the request button.","            .prepare,","            .error(BaseError(\"money < min supported\")),","            \/\/ Select another bank and input money amount t5 then press the request button.","            .prepare,","            .error(BaseError(\"money > max supported\"))","        ]","        ","        let expected =","        expectedCase1 +","        expectedCase2","        ","    }","}","","let MONEY_AMOUNT_9026:Double = 9_026_000","let MONEY_AMOUNT_3501:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireInputMoreTheFirstNumberCard)","let MONEY_AMOUNT_3502:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireChoseAConversationFee)","let MONEY_AMOUNT_3503:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotSupported)","let MONEY_AMOUNT_3504:Double = Double(InstallmentFeeMoneyWithErrorMock.BelowMin)","let MONEY_AMOUNT_3505:Double = Double(InstallmentFeeMoneyWithErrorMock.AboveMax)","let MONEY_AMOUNT_3506:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotBelongToBank)","let MONEY_AMOUNT_3507:Double = Double(InstallmentFeeMoneyWithErrorMock.SupportPeriodNotSupported)","let MONEY_AMOUNT_FOR_CARD_BELONG_TO_ANOTHER_BANK:Double = Double(InstallmentFeeMoneyWithErrorMock.CardBelongToAnotherBank)","let MONEY_AMOUNT_FOR_ERROR_1:Double = Double(InstallmentFeeMoneyWithErrorMock.DefaultError)","","fileprivate enum InstallmentFeeMoneyWithErrorMock {","    static let RequireInputMoreTheFirstNumberCard = 3_501_000","    static let RequireChoseAConversationFee = 3_502_000","    static let CardNotSupported = 3_503_000","    static let BelowMin = 3_504_000","    static let AboveMax = 3_505_000","    static let CardNotBelongToBank = 3_506_000","    static let SupportPeriodNotSupported = 3_507_000","    ","    static let DefaultError = 3_170_000 \/\/ purpose error -1","    static let CardBelongToAnotherBank = 3_180_000 \/\/ add to check card not belong to current bank","}","","\/\/ MARK: -  Private function","private extension InstallmentFee_VMTests {","    ","    func getFeeCharge(","        type: InstallmentFeeCheckingType,","        amount: Double,","        bankCode: String,","        cardNoPrefix: String?,","        periods: [Int],","        installmentConversionFee: String?,","        shopId: Double?,","        shopDomain: String?","    ) -> Observable<Result<[InstallmentFeeCharge],BaseError>> {","        Observable.create {[weak self] ob in","            guard let self else {","                ob.onCompleted()","                return Disposables.create()","            }","            self.viewModel.feeUC.getInstallmentFeeCharge(type: type, amount: amount, bankCode: bankCode, cardNoPrefix: cardNoPrefix, periods: periods, installmentConversionFee: installmentConversionFee, shopId: shopId, shopDomain: shopDomain)","                .asObservable()","                .subscribe(onNext: {","                    ob.onNext(.success($0))","                }, onError: { error in","                    if let error = error as? BaseError {","                        ob.onNext(.failure(error))","                    } else {","                        ob.onCompleted()","                    }","                })","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","    ","    func validate(","        type: InstallmentFeeCheckingType,","        money: Double?,","        card: String?,","        period: [Int],","        shop: Domain.Shop?,","        shopDomain: String?,","        bank: InstallmentBank?","    ) -> Observable<Result<Void, Error>>{","        let data: InstallmentFeeChargeUseCase.DataChainGetBanksResponse = (","            [],[], shop, shopDomain, bank, type, money, card, period, nil \/\/ conversationFee","        )","        return Observable.create {[unowned self] ob in","            self.viewModel.feeUC.validate(data)","                .asObservable()","                .subscribe { _ in","                    ob.onNext(.success(()))","                } onError: { error in","                    ob.onNext(.failure(error))","                }","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","}","","extension Domain.PeriodSupport {","    public var debugDescription: String {","        return \"period: \\(period) - min: \\(minPayment) - max: \\(maxPayment)\"","    }","    ","    static var three: Domain.PeriodSupport {","        .init(period: 3, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var six: Domain.PeriodSupport {","        .init(period: 6, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var nine: Domain.PeriodSupport {","        .init(period: 9, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var thirtySix: Domain.PeriodSupport {","        .init(period: 36, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","}","","extension InstallmentBank {","    static var stb: InstallmentBank {","        .init(bankCode: \"STB\", bankName: \"Sacombank\", periodSupports: [.three, .six, .nine, .thirtySix], bankLogoUrl: \"\")","    }","    ","    static var vib: InstallmentBank {","        .init(bankCode: \"VIB\", bankName: \"VietInbank\", periodSupports: [.three, .six, .nine], bankLogoUrl: \"\")","    }","}","","extension Domain.Shop {","    static var shop1: Domain.Shop {","        .init(shopId: 100, shopDomains: [\"https:\/\/shops1.com.vn\"], emailShop: nil, shopName: \"Shop one\")","    }","    static var shop2: Domain.Shop {","        .init(shopId: 200, shopDomains: [\"https:\/\/shops2.com.vn\"], emailShop: nil, shopName: \"Shop two\")","    }","}","","extension InstallmentFeeChargeState: Equatable {","    public static func == (lhs: PayooMerchant.InstallmentFeeChargeState, rhs: PayooMerchant.InstallmentFeeChargeState) -> Bool {","        lhs.note == rhs.note","    }","    ","    public var note: String {","        switch self {","        case .prepare:","            \"prepare\"","        case .haveNoPermission:","            \"haveNoPermission\"","        case .noFee:","            \"noFee\"","        case .notice(message: let message):","            \"notice\"","        case .haveFee:","            \"haveFee\"","        case .error(_):","            \"error\"","        }","    }","}"]},"viewmodel-2-write-7.swift":{"fileType":"swift","fileName":"InstallmentFee_VMTests.swift","content":["\/\/","\/\/  InstallmentFee_VMTests.swift","\/\/  PayooMerchantTests","\/\/","\/\/  Created by Dai Pham on 25\/4\/24.","\/\/  Copyright © 2024 VietUnion. All rights reserved.","\/\/","","import XCTest","import RxSwift","import RxTest","import RxCocoa","import Domain","@testable import PayooMerchant","","final class InstallmentFee_VMTests: XCTestCase {","","    let userDefaultMock = UserDefaultsService_InstallmentFee_Mock()","    lazy var viewModel:InstallmentFeeViewModel = .init(","        bankUC: InstallmentBankUseCase(apiService: ApiServiceMock()),","        feeUC: InstallmentFeeChargeUseCase(apiService: ApiServiceMock()),","        shopUC: InstallmentShopUseCase(apiService: ApiServiceMock()),","        sessionUC: container.resolve(SessionUseCase.self)!,","        featureUC: FeaturesUseCase(userDefaultsService: userDefaultMock, profileUC: container.resolve(ProfileUseCase.self)!)","    )","    ","    let events = [\"x\": ()] \/\/ simulate user press request button","    ","    var disposeBag = DisposeBag()","    ","    override func setUpWithError() throws {","        \/\/ Put setup code here. This method is called before the invocation of each test method in the class.","        userDefaultMock.permission = [.installmentFeeCheckOnline,.installmentFeeCheckInStore]","        viewModel.banks = [.stb,.vib]","        viewModel.shops = [.shop1,.shop2]","        viewModel.periods.accept([3]) \/\/ default 3","        viewModel.viewDidLoad()","    }","","    override func tearDownWithError() throws {","        \/\/ Put teardown code here. This method is called after the invocation of each test method in the class.","        viewModel.reset()","        disposeBag = DisposeBag()","    }","    ","    func testInstallmentFee_MoneyAmount() {","        ","        let scheduler = TestScheduler(initialClock: 0, resolution: 0, simulateProcessingDelay: true)","        ","        \/\/ Set up all valid conditions to check the validation of a money amount.","        viewModel.currentSelectedBank.accept(.stb)","        viewModel.currentSelectedShop.accept(.shop1)","        viewModel.currentSelectedShopDomain.accept(Shop.shop1.shopDomains.first)","        ","        let events:[String: Any?] = [","            \/\/ x represents the action when the request button is pressed.","            \"x\": (),","            \/\/ All keys with the prefix 't' represent the action when the user inputs the money amount.","            \"t0\": nil,","            \"t\": Double(500_000),","            \"t1\": Double(510_000),","            \"t2\": Double(5_000_000),","            \"t4\": Double(1_000_000),","            \"t5\": Double(1_100_000_000),","            \/\/ All keys with prefix 'c' represent the action when the user select installment type","            \"c\": InstallmentFeeCheckingType.counter,","            \"c1\": InstallmentFeeCheckingType.online,","            \/\/ All keys with the prefix 'b' represent the action when the user select a bank","            \"b\" : InstallmentBank.stb,","            \"b1\": InstallmentBank.vib","        ]","        ","        let setupEvents: [String] = [","            \/\/ Case 1. Validate that the money amount has been inputted.","            \"x-t-x-t1-x-t2-x-t0-x\",","            \/\/ Case 2. Validate that the money amount inputed with installment fee type online","            \"c1-t0-b-x-t-x-t2-x-b1-t4-x-t5-x\"","        ]","        \/\/ Set up events and times.","        let scheduleEvents = scheduler.parseEventsAndTimes(","            timeline:  setupEvents.joined(separator: \"-\") + \"--\",","            values: events","        ).first!","        ","        let expectedCase1: [InstallmentFeeChargeState] = [","            \/\/ Press the request button.","            .prepare,","            .error(BaseError()),","            \/\/ Press the request button with the money amount set to t.","            .prepare,","            .haveFee,","            \/\/ Press the request button with the money amount set to t1.","            .prepare,","            .haveFee,","            \/\/ Press the request button with the money amount set to t2.","            .prepare,","            .haveFee,","            \/\/ Press the request button with the money amount set to t0.","            .prepare,","            .error(BaseError())","        ]","        ","        let expectedCase2: [InstallmentFeeChargeState] = [","            \/\/ change to installment type online","            .prepare,","            \/\/ input: type counter, money amount set to nil, select a bank then press the request button.","            .prepare,","            .error(BaseError()),","            \/\/ Input: money amount: t then press the request button.","            .prepare,","            .error(BaseError(\"money < min supported\")),","            \/\/ Press the request button with the money amount set to t2.","            .prepare,","            .haveFee,","            \/\/ Select another bank and input money amount t4 then press the request button.","            .prepare,","            .error(BaseError(\"money < min supported\")),","            \/\/ Select another bank and input money amount t5 then press the request button.","            .prepare,","            .error(BaseError(\"money > max supported\"))","        ]","        ","        let expected =","        expectedCase1 +","        expectedCase2","        ","        \/\/ Observable events timeline.","        scheduler.createHotObservable(scheduleEvents)","            .debug(\"🔤\")","            .subscribe(onNext: {[unowned self] input in","                if input is Void {","                    self.viewModel.getInstallmentFeeCharge()","                } else if let bank = input as? InstallmentBank {","                    self.viewModel.currentSelectedBank.accept(bank)","                } else if let shop = input as? Shop {","                    self.viewModel.currentSelectedShop.accept(shop)","                } else if let type = input as? InstallmentFeeCheckingType {","                    self.viewModel.installmentCheckingFeeType.accept(type)","                } else {","                    let number = input as? Double","                    self.viewModel.currentAmount.accept(number)","                }","            })","            .disposed(by: self.disposeBag)","","        \/\/ skip initial value so add .skip(1)","        let record = scheduler.record(source: viewModel.getState().debug(\"🧨\").map({ $0?.name }).asObservable().skip(1))","        scheduler.start()","        ","    }","}","","let MONEY_AMOUNT_9026:Double = 9_026_000","let MONEY_AMOUNT_3501:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireInputMoreTheFirstNumberCard)","let MONEY_AMOUNT_3502:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireChoseAConversationFee)","let MONEY_AMOUNT_3503:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotSupported)","let MONEY_AMOUNT_3504:Double = Double(InstallmentFeeMoneyWithErrorMock.BelowMin)","let MONEY_AMOUNT_3505:Double = Double(InstallmentFeeMoneyWithErrorMock.AboveMax)","let MONEY_AMOUNT_3506:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotBelongToBank)","let MONEY_AMOUNT_3507:Double = Double(InstallmentFeeMoneyWithErrorMock.SupportPeriodNotSupported)","let MONEY_AMOUNT_FOR_CARD_BELONG_TO_ANOTHER_BANK:Double = Double(InstallmentFeeMoneyWithErrorMock.CardBelongToAnotherBank)","let MONEY_AMOUNT_FOR_ERROR_1:Double = Double(InstallmentFeeMoneyWithErrorMock.DefaultError)","","fileprivate enum InstallmentFeeMoneyWithErrorMock {","    static let RequireInputMoreTheFirstNumberCard = 3_501_000","    static let RequireChoseAConversationFee = 3_502_000","    static let CardNotSupported = 3_503_000","    static let BelowMin = 3_504_000","    static let AboveMax = 3_505_000","    static let CardNotBelongToBank = 3_506_000","    static let SupportPeriodNotSupported = 3_507_000","    ","    static let DefaultError = 3_170_000 \/\/ purpose error -1","    static let CardBelongToAnotherBank = 3_180_000 \/\/ add to check card not belong to current bank","}","","\/\/ MARK: -  Private function","private extension InstallmentFee_VMTests {","    ","    func getFeeCharge(","        type: InstallmentFeeCheckingType,","        amount: Double,","        bankCode: String,","        cardNoPrefix: String?,","        periods: [Int],","        installmentConversionFee: String?,","        shopId: Double?,","        shopDomain: String?","    ) -> Observable<Result<[InstallmentFeeCharge],BaseError>> {","        Observable.create {[weak self] ob in","            guard let self else {","                ob.onCompleted()","                return Disposables.create()","            }","            self.viewModel.feeUC.getInstallmentFeeCharge(type: type, amount: amount, bankCode: bankCode, cardNoPrefix: cardNoPrefix, periods: periods, installmentConversionFee: installmentConversionFee, shopId: shopId, shopDomain: shopDomain)","                .asObservable()","                .subscribe(onNext: {","                    ob.onNext(.success($0))","                }, onError: { error in","                    if let error = error as? BaseError {","                        ob.onNext(.failure(error))","                    } else {","                        ob.onCompleted()","                    }","                })","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","    ","    func validate(","        type: InstallmentFeeCheckingType,","        money: Double?,","        card: String?,","        period: [Int],","        shop: Domain.Shop?,","        shopDomain: String?,","        bank: InstallmentBank?","    ) -> Observable<Result<Void, Error>>{","        let data: InstallmentFeeChargeUseCase.DataChainGetBanksResponse = (","            [],[], shop, shopDomain, bank, type, money, card, period, nil \/\/ conversationFee","        )","        return Observable.create {[unowned self] ob in","            self.viewModel.feeUC.validate(data)","                .asObservable()","                .subscribe { _ in","                    ob.onNext(.success(()))","                } onError: { error in","                    ob.onNext(.failure(error))","                }","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","}","","extension Domain.PeriodSupport {","    public var debugDescription: String {","        return \"period: \\(period) - min: \\(minPayment) - max: \\(maxPayment)\"","    }","    ","    static var three: Domain.PeriodSupport {","        .init(period: 3, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var six: Domain.PeriodSupport {","        .init(period: 6, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var nine: Domain.PeriodSupport {","        .init(period: 9, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var thirtySix: Domain.PeriodSupport {","        .init(period: 36, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","}","","extension InstallmentBank {","    static var stb: InstallmentBank {","        .init(bankCode: \"STB\", bankName: \"Sacombank\", periodSupports: [.three, .six, .nine, .thirtySix], bankLogoUrl: \"\")","    }","    ","    static var vib: InstallmentBank {","        .init(bankCode: \"VIB\", bankName: \"VietInbank\", periodSupports: [.three, .six, .nine], bankLogoUrl: \"\")","    }","}","","extension Domain.Shop {","    static var shop1: Domain.Shop {","        .init(shopId: 100, shopDomains: [\"https:\/\/shops1.com.vn\"], emailShop: nil, shopName: \"Shop one\")","    }","    static var shop2: Domain.Shop {","        .init(shopId: 200, shopDomains: [\"https:\/\/shops2.com.vn\"], emailShop: nil, shopName: \"Shop two\")","    }","}","","extension InstallmentFeeChargeState: Equatable {","    public static func == (lhs: PayooMerchant.InstallmentFeeChargeState, rhs: PayooMerchant.InstallmentFeeChargeState) -> Bool {","        lhs.note == rhs.note","    }","    ","    public var note: String {","        switch self {","        case .prepare:","            \"prepare\"","        case .haveNoPermission:","            \"haveNoPermission\"","        case .noFee:","            \"noFee\"","        case .notice(message: let message):","            \"notice\"","        case .haveFee:","            \"haveFee\"","        case .error(_):","            \"error\"","        }","    }","}"],"syntax":"swift","identifier":"viewmodel-2-write-7.swift","type":"file","highlights":[{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149}]},"viewmodel-1-setup-2.swift":{"fileType":"swift","fileName":"InstallmentFee_VMTests.swift","content":["\/\/","\/\/  InstallmentFee_VMTests.swift","\/\/  PayooMerchantTests","\/\/","\/\/  Created by Dai Pham on 25\/4\/24.","\/\/  Copyright © 2024 VietUnion. All rights reserved.","\/\/","","import XCTest","import RxSwift","import RxTest","import RxCocoa","import Domain","@testable import PayooMerchant","","final class InstallmentFee_VMTests: XCTestCase {","","    let userDefaultMock = UserDefaultsService_InstallmentFee_Mock()","    lazy var viewModel:InstallmentFeeViewModel = .init(","        bankUC: InstallmentBankUseCase(apiService: ApiServiceMock()),","        feeUC: InstallmentFeeChargeUseCase(apiService: ApiServiceMock()),","        shopUC: InstallmentShopUseCase(apiService: ApiServiceMock()),","        sessionUC: container.resolve(SessionUseCase.self)!,","        featureUC: FeaturesUseCase(userDefaultsService: userDefaultMock, profileUC: container.resolve(ProfileUseCase.self)!)","    )","    ","    var disposeBag = DisposeBag()","    ","    override func setUpWithError() throws {","        \/\/ Put setup code here. This method is called before the invocation of each test method in the class.","        userDefaultMock.permission = [.installmentFeeCheckOnline,.installmentFeeCheckInStore]","        viewModel.banks = [.stb,.vib]","        viewModel.shops = [.shop1,.shop2]","        viewModel.periods.accept([3]) \/\/ default 3","        viewModel.viewDidLoad()","    }","","    override func tearDownWithError() throws {","        \/\/ Put teardown code here. This method is called after the invocation of each test method in the class.","        viewModel.reset()","        disposeBag = DisposeBag()","    }","}"],"syntax":"swift","identifier":"viewmodel-1-setup-2.swift","type":"file","highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42}]},"viewmodel-2-write-3.swift":{"identifier":"viewmodel-2-write-3.swift","content":["\/\/","\/\/  InstallmentFee_VMTests.swift","\/\/  PayooMerchantTests","\/\/","\/\/  Created by Dai Pham on 25\/4\/24.","\/\/  Copyright © 2024 VietUnion. All rights reserved.","\/\/","","import XCTest","import RxSwift","import RxTest","import RxCocoa","import Domain","@testable import PayooMerchant","","final class InstallmentFee_VMTests: XCTestCase {","","    let userDefaultMock = UserDefaultsService_InstallmentFee_Mock()","    lazy var viewModel:InstallmentFeeViewModel = .init(","        bankUC: InstallmentBankUseCase(apiService: ApiServiceMock()),","        feeUC: InstallmentFeeChargeUseCase(apiService: ApiServiceMock()),","        shopUC: InstallmentShopUseCase(apiService: ApiServiceMock()),","        sessionUC: container.resolve(SessionUseCase.self)!,","        featureUC: FeaturesUseCase(userDefaultsService: userDefaultMock, profileUC: container.resolve(ProfileUseCase.self)!)","    )","    ","    let events = [\"x\": ()] \/\/ simulate user press request button","    ","    var disposeBag = DisposeBag()","    ","    override func setUpWithError() throws {","        \/\/ Put setup code here. This method is called before the invocation of each test method in the class.","        userDefaultMock.permission = [.installmentFeeCheckOnline,.installmentFeeCheckInStore]","        viewModel.banks = [.stb,.vib]","        viewModel.shops = [.shop1,.shop2]","        viewModel.periods.accept([3]) \/\/ default 3","        viewModel.viewDidLoad()","    }","","    override func tearDownWithError() throws {","        \/\/ Put teardown code here. This method is called after the invocation of each test method in the class.","        viewModel.reset()","        disposeBag = DisposeBag()","    }","    ","    func testInstallmentFee_MoneyAmount() {","        ","        let scheduler = TestScheduler(initialClock: 0, resolution: 0, simulateProcessingDelay: true)","        ","        \/\/ Set up all valid conditions to check the validation of a money amount.","        viewModel.currentSelectedBank.accept(.stb)","        viewModel.currentSelectedShop.accept(.shop1)","        viewModel.currentSelectedShopDomain.accept(Shop.shop1.shopDomains.first)","        ","    }","}","","let MONEY_AMOUNT_9026:Double = 9_026_000","let MONEY_AMOUNT_3501:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireInputMoreTheFirstNumberCard)","let MONEY_AMOUNT_3502:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireChoseAConversationFee)","let MONEY_AMOUNT_3503:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotSupported)","let MONEY_AMOUNT_3504:Double = Double(InstallmentFeeMoneyWithErrorMock.BelowMin)","let MONEY_AMOUNT_3505:Double = Double(InstallmentFeeMoneyWithErrorMock.AboveMax)","let MONEY_AMOUNT_3506:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotBelongToBank)","let MONEY_AMOUNT_3507:Double = Double(InstallmentFeeMoneyWithErrorMock.SupportPeriodNotSupported)","let MONEY_AMOUNT_FOR_CARD_BELONG_TO_ANOTHER_BANK:Double = Double(InstallmentFeeMoneyWithErrorMock.CardBelongToAnotherBank)","let MONEY_AMOUNT_FOR_ERROR_1:Double = Double(InstallmentFeeMoneyWithErrorMock.DefaultError)","","fileprivate enum InstallmentFeeMoneyWithErrorMock {","    static let RequireInputMoreTheFirstNumberCard = 3_501_000","    static let RequireChoseAConversationFee = 3_502_000","    static let CardNotSupported = 3_503_000","    static let BelowMin = 3_504_000","    static let AboveMax = 3_505_000","    static let CardNotBelongToBank = 3_506_000","    static let SupportPeriodNotSupported = 3_507_000","    ","    static let DefaultError = 3_170_000 \/\/ purpose error -1","    static let CardBelongToAnotherBank = 3_180_000 \/\/ add to check card not belong to current bank","}","","\/\/ MARK: -  Private function","private extension InstallmentFee_VMTests {","    ","    func getFeeCharge(","        type: InstallmentFeeCheckingType,","        amount: Double,","        bankCode: String,","        cardNoPrefix: String?,","        periods: [Int],","        installmentConversionFee: String?,","        shopId: Double?,","        shopDomain: String?","    ) -> Observable<Result<[InstallmentFeeCharge],BaseError>> {","        Observable.create {[weak self] ob in","            guard let self else {","                ob.onCompleted()","                return Disposables.create()","            }","            self.viewModel.feeUC.getInstallmentFeeCharge(type: type, amount: amount, bankCode: bankCode, cardNoPrefix: cardNoPrefix, periods: periods, installmentConversionFee: installmentConversionFee, shopId: shopId, shopDomain: shopDomain)","                .asObservable()","                .subscribe(onNext: {","                    ob.onNext(.success($0))","                }, onError: { error in","                    if let error = error as? BaseError {","                        ob.onNext(.failure(error))","                    } else {","                        ob.onCompleted()","                    }","                })","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","    ","    func validate(","        type: InstallmentFeeCheckingType,","        money: Double?,","        card: String?,","        period: [Int],","        shop: Domain.Shop?,","        shopDomain: String?,","        bank: InstallmentBank?","    ) -> Observable<Result<Void, Error>>{","        let data: InstallmentFeeChargeUseCase.DataChainGetBanksResponse = (","            [],[], shop, shopDomain, bank, type, money, card, period, nil \/\/ conversationFee","        )","        return Observable.create {[unowned self] ob in","            self.viewModel.feeUC.validate(data)","                .asObservable()","                .subscribe { _ in","                    ob.onNext(.success(()))","                } onError: { error in","                    ob.onNext(.failure(error))","                }","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","}","","extension Domain.PeriodSupport {","    public var debugDescription: String {","        return \"period: \\(period) - min: \\(minPayment) - max: \\(maxPayment)\"","    }","    ","    static var three: Domain.PeriodSupport {","        .init(period: 3, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var six: Domain.PeriodSupport {","        .init(period: 6, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var nine: Domain.PeriodSupport {","        .init(period: 9, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var thirtySix: Domain.PeriodSupport {","        .init(period: 36, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","}","","extension InstallmentBank {","    static var stb: InstallmentBank {","        .init(bankCode: \"STB\", bankName: \"Sacombank\", periodSupports: [.three, .six, .nine, .thirtySix], bankLogoUrl: \"\")","    }","    ","    static var vib: InstallmentBank {","        .init(bankCode: \"VIB\", bankName: \"VietInbank\", periodSupports: [.three, .six, .nine], bankLogoUrl: \"\")","    }","}","","extension Domain.Shop {","    static var shop1: Domain.Shop {","        .init(shopId: 100, shopDomains: [\"https:\/\/shops1.com.vn\"], emailShop: nil, shopName: \"Shop one\")","    }","    static var shop2: Domain.Shop {","        .init(shopId: 200, shopDomains: [\"https:\/\/shops2.com.vn\"], emailShop: nil, shopName: \"Shop two\")","    }","}","","extension InstallmentFeeChargeState: Equatable {","    public static func == (lhs: PayooMerchant.InstallmentFeeChargeState, rhs: PayooMerchant.InstallmentFeeChargeState) -> Bool {","        lhs.note == rhs.note","    }","    ","    public var note: String {","        switch self {","        case .prepare:","            \"prepare\"","        case .haveNoPermission:","            \"haveNoPermission\"","        case .noFee:","            \"noFee\"","        case .notice(message: let message):","            \"notice\"","        case .haveFee:","            \"haveFee\"","        case .error(_):","            \"error\"","        }","    }","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":50},{"line":51},{"line":52},{"line":53},{"line":54}],"type":"file","fileName":"InstallmentFee_VMTests.swift"},"preview-viewmodel-1-setup-finish.png":{"identifier":"preview-viewmodel-1-setup-finish.png","alt":"Declare additional helper classes","variants":[{"traits":["1x","light"],"url":"\/images\/preview-viewmodel-1-setup-finish.png"}],"type":"image"},"doc://com.example.UnitTestTutorial/tutorials/UnitTestTutorial/ViewModel#Setup-and-write-first-test-method":{"identifier":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTestTutorial\/ViewModel#Setup-and-write-first-test-method","role":"pseudoSymbol","title":"Setup and write first test method","abstract":[{"text":"When writing unit tests for view models using RxSwift, there are several key aspects to consider:","type":"text"}],"kind":"section","type":"section","url":"\/tutorials\/unittesttutorial\/viewmodel#Setup-and-write-first-test-method"},"doc://com.example.UnitTestTutorial/tutorials/UnitTest-with-RxSwift/UnitTest-with-ViewModel":{"title":"UnitTest with ViewModel","abstract":[],"type":"topic","url":"\/tutorials\/unittest-with-rxswift\/unittest-with-viewmodel","identifier":"doc:\/\/com.example.UnitTestTutorial\/tutorials\/UnitTest-with-RxSwift\/UnitTest-with-ViewModel","kind":"article","role":"article"},"installmentfee-card-error.png":{"identifier":"installmentfee-card-error.png","variants":[{"traits":["1x","light"],"url":"\/images\/installmentfee-card-error.png"}],"type":"image","alt":null},"viewmodel-2-write-4.swift":{"fileType":"swift","type":"file","fileName":"InstallmentFee_VMTests.swift","highlights":[{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72}],"content":["\/\/","\/\/  InstallmentFee_VMTests.swift","\/\/  PayooMerchantTests","\/\/","\/\/  Created by Dai Pham on 25\/4\/24.","\/\/  Copyright © 2024 VietUnion. All rights reserved.","\/\/","","import XCTest","import RxSwift","import RxTest","import RxCocoa","import Domain","@testable import PayooMerchant","","final class InstallmentFee_VMTests: XCTestCase {","","    let userDefaultMock = UserDefaultsService_InstallmentFee_Mock()","    lazy var viewModel:InstallmentFeeViewModel = .init(","        bankUC: InstallmentBankUseCase(apiService: ApiServiceMock()),","        feeUC: InstallmentFeeChargeUseCase(apiService: ApiServiceMock()),","        shopUC: InstallmentShopUseCase(apiService: ApiServiceMock()),","        sessionUC: container.resolve(SessionUseCase.self)!,","        featureUC: FeaturesUseCase(userDefaultsService: userDefaultMock, profileUC: container.resolve(ProfileUseCase.self)!)","    )","    ","    let events = [\"x\": ()] \/\/ simulate user press request button","    ","    var disposeBag = DisposeBag()","    ","    override func setUpWithError() throws {","        \/\/ Put setup code here. This method is called before the invocation of each test method in the class.","        userDefaultMock.permission = [.installmentFeeCheckOnline,.installmentFeeCheckInStore]","        viewModel.banks = [.stb,.vib]","        viewModel.shops = [.shop1,.shop2]","        viewModel.periods.accept([3]) \/\/ default 3","        viewModel.viewDidLoad()","    }","","    override func tearDownWithError() throws {","        \/\/ Put teardown code here. This method is called after the invocation of each test method in the class.","        viewModel.reset()","        disposeBag = DisposeBag()","    }","    ","    func testInstallmentFee_MoneyAmount() {","        ","        let scheduler = TestScheduler(initialClock: 0, resolution: 0, simulateProcessingDelay: true)","        ","        \/\/ Set up all valid conditions to check the validation of a money amount.","        viewModel.currentSelectedBank.accept(.stb)","        viewModel.currentSelectedShop.accept(.shop1)","        viewModel.currentSelectedShopDomain.accept(Shop.shop1.shopDomains.first)","        ","        let events:[String: Any?] = [","            \/\/ x represents the action when the request button is pressed.","            \"x\": (),","            \/\/ All keys with the prefix 't' represent the action when the user inputs the money amount.","            \"t0\": nil,","            \"t\": Double(500_000),","            \"t1\": Double(510_000),","            \"t2\": Double(5_000_000),","            \"t4\": Double(1_000_000),","            \"t5\": Double(1_100_000_000),","            \/\/ All keys with prefix 'c' represent the action when the user select installment type","            \"c\": InstallmentFeeCheckingType.counter,","            \"c1\": InstallmentFeeCheckingType.online,","            \/\/ All keys with the prefix 'b' represent the action when the user select a bank","            \"b\" : InstallmentBank.stb,","            \"b1\": InstallmentBank.vib","        ]","        ","    }","}","","let MONEY_AMOUNT_9026:Double = 9_026_000","let MONEY_AMOUNT_3501:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireInputMoreTheFirstNumberCard)","let MONEY_AMOUNT_3502:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireChoseAConversationFee)","let MONEY_AMOUNT_3503:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotSupported)","let MONEY_AMOUNT_3504:Double = Double(InstallmentFeeMoneyWithErrorMock.BelowMin)","let MONEY_AMOUNT_3505:Double = Double(InstallmentFeeMoneyWithErrorMock.AboveMax)","let MONEY_AMOUNT_3506:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotBelongToBank)","let MONEY_AMOUNT_3507:Double = Double(InstallmentFeeMoneyWithErrorMock.SupportPeriodNotSupported)","let MONEY_AMOUNT_FOR_CARD_BELONG_TO_ANOTHER_BANK:Double = Double(InstallmentFeeMoneyWithErrorMock.CardBelongToAnotherBank)","let MONEY_AMOUNT_FOR_ERROR_1:Double = Double(InstallmentFeeMoneyWithErrorMock.DefaultError)","","fileprivate enum InstallmentFeeMoneyWithErrorMock {","    static let RequireInputMoreTheFirstNumberCard = 3_501_000","    static let RequireChoseAConversationFee = 3_502_000","    static let CardNotSupported = 3_503_000","    static let BelowMin = 3_504_000","    static let AboveMax = 3_505_000","    static let CardNotBelongToBank = 3_506_000","    static let SupportPeriodNotSupported = 3_507_000","    ","    static let DefaultError = 3_170_000 \/\/ purpose error -1","    static let CardBelongToAnotherBank = 3_180_000 \/\/ add to check card not belong to current bank","}","","\/\/ MARK: -  Private function","private extension InstallmentFee_VMTests {","    ","    func getFeeCharge(","        type: InstallmentFeeCheckingType,","        amount: Double,","        bankCode: String,","        cardNoPrefix: String?,","        periods: [Int],","        installmentConversionFee: String?,","        shopId: Double?,","        shopDomain: String?","    ) -> Observable<Result<[InstallmentFeeCharge],BaseError>> {","        Observable.create {[weak self] ob in","            guard let self else {","                ob.onCompleted()","                return Disposables.create()","            }","            self.viewModel.feeUC.getInstallmentFeeCharge(type: type, amount: amount, bankCode: bankCode, cardNoPrefix: cardNoPrefix, periods: periods, installmentConversionFee: installmentConversionFee, shopId: shopId, shopDomain: shopDomain)","                .asObservable()","                .subscribe(onNext: {","                    ob.onNext(.success($0))","                }, onError: { error in","                    if let error = error as? BaseError {","                        ob.onNext(.failure(error))","                    } else {","                        ob.onCompleted()","                    }","                })","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","    ","    func validate(","        type: InstallmentFeeCheckingType,","        money: Double?,","        card: String?,","        period: [Int],","        shop: Domain.Shop?,","        shopDomain: String?,","        bank: InstallmentBank?","    ) -> Observable<Result<Void, Error>>{","        let data: InstallmentFeeChargeUseCase.DataChainGetBanksResponse = (","            [],[], shop, shopDomain, bank, type, money, card, period, nil \/\/ conversationFee","        )","        return Observable.create {[unowned self] ob in","            self.viewModel.feeUC.validate(data)","                .asObservable()","                .subscribe { _ in","                    ob.onNext(.success(()))","                } onError: { error in","                    ob.onNext(.failure(error))","                }","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","}","","extension Domain.PeriodSupport {","    public var debugDescription: String {","        return \"period: \\(period) - min: \\(minPayment) - max: \\(maxPayment)\"","    }","    ","    static var three: Domain.PeriodSupport {","        .init(period: 3, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var six: Domain.PeriodSupport {","        .init(period: 6, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var nine: Domain.PeriodSupport {","        .init(period: 9, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var thirtySix: Domain.PeriodSupport {","        .init(period: 36, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","}","","extension InstallmentBank {","    static var stb: InstallmentBank {","        .init(bankCode: \"STB\", bankName: \"Sacombank\", periodSupports: [.three, .six, .nine, .thirtySix], bankLogoUrl: \"\")","    }","    ","    static var vib: InstallmentBank {","        .init(bankCode: \"VIB\", bankName: \"VietInbank\", periodSupports: [.three, .six, .nine], bankLogoUrl: \"\")","    }","}","","extension Domain.Shop {","    static var shop1: Domain.Shop {","        .init(shopId: 100, shopDomains: [\"https:\/\/shops1.com.vn\"], emailShop: nil, shopName: \"Shop one\")","    }","    static var shop2: Domain.Shop {","        .init(shopId: 200, shopDomains: [\"https:\/\/shops2.com.vn\"], emailShop: nil, shopName: \"Shop two\")","    }","}","","extension InstallmentFeeChargeState: Equatable {","    public static func == (lhs: PayooMerchant.InstallmentFeeChargeState, rhs: PayooMerchant.InstallmentFeeChargeState) -> Bool {","        lhs.note == rhs.note","    }","    ","    public var note: String {","        switch self {","        case .prepare:","            \"prepare\"","        case .haveNoPermission:","            \"haveNoPermission\"","        case .noFee:","            \"noFee\"","        case .notice(message: let message):","            \"notice\"","        case .haveFee:","            \"haveFee\"","        case .error(_):","            \"error\"","        }","    }","}"],"identifier":"viewmodel-2-write-4.swift","syntax":"swift"},"preview-viewmodel-1-setup-1.png":{"identifier":"preview-viewmodel-1-setup-1.png","variants":[{"traits":["1x","light"],"url":"\/images\/preview-viewmodel-1-setup-1.png"}],"type":"image","alt":"Create a subclass of XCTestCase"},"InstallmentFee_VMTests.swift":{"checksum":"86b2c58ef2ee4b1d03d71618ef05e86c6c1a46e20a282c9acf51460fbd23b3498b505202f820f001488ac9596350a3667fe95bd6936712b6282961c12fe3683d","type":"download","url":"\/downloads\/InstallmentFee_VMTests.swift","identifier":"InstallmentFee_VMTests.swift"},"viewmodel-1-setup-finish.swift":{"content":["\/\/","\/\/  InstallmentFee_VMTests.swift","\/\/  PayooMerchantTests","\/\/","\/\/  Created by Dai Pham on 25\/4\/24.","\/\/  Copyright © 2024 VietUnion. All rights reserved.","\/\/","","import XCTest","import RxSwift","import RxTest","import RxCocoa","import Domain","@testable import PayooMerchant","","final class InstallmentFee_VMTests: XCTestCase {","","    let userDefaultMock = UserDefaultsService_InstallmentFee_Mock()","    lazy var viewModel:InstallmentFeeViewModel = .init(","        bankUC: InstallmentBankUseCase(apiService: ApiServiceMock()),","        feeUC: InstallmentFeeChargeUseCase(apiService: ApiServiceMock()),","        shopUC: InstallmentShopUseCase(apiService: ApiServiceMock()),","        sessionUC: container.resolve(SessionUseCase.self)!,","        featureUC: FeaturesUseCase(userDefaultsService: userDefaultMock, profileUC: container.resolve(ProfileUseCase.self)!)","    )","    ","    let events = [\"x\": ()] \/\/ simulate user press request button","    ","    var disposeBag = DisposeBag()","    ","    override func setUpWithError() throws {","        \/\/ Put setup code here. This method is called before the invocation of each test method in the class.","        userDefaultMock.permission = [.installmentFeeCheckOnline,.installmentFeeCheckInStore]","        viewModel.banks = [.stb,.vib]","        viewModel.shops = [.shop1,.shop2]","        viewModel.periods.accept([3]) \/\/ default 3","        viewModel.viewDidLoad()","    }","","    override func tearDownWithError() throws {","        \/\/ Put teardown code here. This method is called after the invocation of each test method in the class.","        viewModel.reset()","        disposeBag = DisposeBag()","    }","}","","let MONEY_AMOUNT_9026:Double = 9_026_000","let MONEY_AMOUNT_3501:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireInputMoreTheFirstNumberCard)","let MONEY_AMOUNT_3502:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireChoseAConversationFee)","let MONEY_AMOUNT_3503:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotSupported)","let MONEY_AMOUNT_3504:Double = Double(InstallmentFeeMoneyWithErrorMock.BelowMin)","let MONEY_AMOUNT_3505:Double = Double(InstallmentFeeMoneyWithErrorMock.AboveMax)","let MONEY_AMOUNT_3506:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotBelongToBank)","let MONEY_AMOUNT_3507:Double = Double(InstallmentFeeMoneyWithErrorMock.SupportPeriodNotSupported)","let MONEY_AMOUNT_FOR_CARD_BELONG_TO_ANOTHER_BANK:Double = Double(InstallmentFeeMoneyWithErrorMock.CardBelongToAnotherBank)","let MONEY_AMOUNT_FOR_ERROR_1:Double = Double(InstallmentFeeMoneyWithErrorMock.DefaultError)","","fileprivate enum InstallmentFeeMoneyWithErrorMock {","    static let RequireInputMoreTheFirstNumberCard = 3_501_000","    static let RequireChoseAConversationFee = 3_502_000","    static let CardNotSupported = 3_503_000","    static let BelowMin = 3_504_000","    static let AboveMax = 3_505_000","    static let CardNotBelongToBank = 3_506_000","    static let SupportPeriodNotSupported = 3_507_000","    ","    static let DefaultError = 3_170_000 \/\/ purpose error -1","    static let CardBelongToAnotherBank = 3_180_000 \/\/ add to check card not belong to current bank","}","","\/\/ MARK: -  Private function","private extension InstallmentFee_VMTests {","    ","    func getFeeCharge(","        type: InstallmentFeeCheckingType,","        amount: Double,","        bankCode: String,","        cardNoPrefix: String?,","        periods: [Int],","        installmentConversionFee: String?,","        shopId: Double?,","        shopDomain: String?","    ) -> Observable<Result<[InstallmentFeeCharge],BaseError>> {","        Observable.create {[weak self] ob in","            guard let self else {","                ob.onCompleted()","                return Disposables.create()","            }","            self.viewModel.feeUC.getInstallmentFeeCharge(type: type, amount: amount, bankCode: bankCode, cardNoPrefix: cardNoPrefix, periods: periods, installmentConversionFee: installmentConversionFee, shopId: shopId, shopDomain: shopDomain)","                .asObservable()","                .subscribe(onNext: {","                    ob.onNext(.success($0))","                }, onError: { error in","                    if let error = error as? BaseError {","                        ob.onNext(.failure(error))","                    } else {","                        ob.onCompleted()","                    }","                })","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","    ","    func validate(","        type: InstallmentFeeCheckingType,","        money: Double?,","        card: String?,","        period: [Int],","        shop: Domain.Shop?,","        shopDomain: String?,","        bank: InstallmentBank?","    ) -> Observable<Result<Void, Error>>{","        let data: InstallmentFeeChargeUseCase.DataChainGetBanksResponse = (","            [],[], shop, shopDomain, bank, type, money, card, period, nil \/\/ conversationFee","        )","        return Observable.create {[unowned self] ob in","            self.viewModel.feeUC.validate(data)","                .asObservable()","                .subscribe { _ in","                    ob.onNext(.success(()))","                } onError: { error in","                    ob.onNext(.failure(error))","                }","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","}","","extension Domain.PeriodSupport {","    public var debugDescription: String {","        return \"period: \\(period) - min: \\(minPayment) - max: \\(maxPayment)\"","    }","    ","    static var three: Domain.PeriodSupport {","        .init(period: 3, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var six: Domain.PeriodSupport {","        .init(period: 6, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var nine: Domain.PeriodSupport {","        .init(period: 9, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var thirtySix: Domain.PeriodSupport {","        .init(period: 36, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","}","","extension InstallmentBank {","    static var stb: InstallmentBank {","        .init(bankCode: \"STB\", bankName: \"Sacombank\", periodSupports: [.three, .six, .nine, .thirtySix], bankLogoUrl: \"\")","    }","    ","    static var vib: InstallmentBank {","        .init(bankCode: \"VIB\", bankName: \"VietInbank\", periodSupports: [.three, .six, .nine], bankLogoUrl: \"\")","    }","}","","extension Domain.Shop {","    static var shop1: Domain.Shop {","        .init(shopId: 100, shopDomains: [\"https:\/\/shops1.com.vn\"], emailShop: nil, shopName: \"Shop one\")","    }","    static var shop2: Domain.Shop {","        .init(shopId: 200, shopDomains: [\"https:\/\/shops2.com.vn\"], emailShop: nil, shopName: \"Shop two\")","    }","}","","extension InstallmentFeeChargeState: Equatable {","    public static func == (lhs: PayooMerchant.InstallmentFeeChargeState, rhs: PayooMerchant.InstallmentFeeChargeState) -> Bool {","        lhs.note == rhs.note","    }","    ","    public var note: String {","        switch self {","        case .prepare:","            \"prepare\"","        case .haveNoPermission:","            \"haveNoPermission\"","        case .noFee:","            \"noFee\"","        case .notice(message: let message):","            \"notice\"","        case .haveFee:","            \"haveFee\"","        case .error(_):","            \"error\"","        }","    }","}"],"type":"file","identifier":"viewmodel-1-setup-finish.swift","fileType":"swift","syntax":"swift","highlights":[{"line":27},{"line":28},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":163},{"line":164},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169},{"line":170},{"line":171},{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":177},{"line":178},{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185},{"line":186},{"line":187},{"line":188},{"line":189},{"line":190}],"fileName":"InstallmentFee_VMTests.swift"},"viewmodel-2-write-1.swift":{"content":["\/\/","\/\/  InstallmentFee_VMTests.swift","\/\/  PayooMerchantTests","\/\/","\/\/  Created by Dai Pham on 25\/4\/24.","\/\/  Copyright © 2024 VietUnion. All rights reserved.","\/\/","","import XCTest","import RxSwift","import RxTest","import RxCocoa","import Domain","@testable import PayooMerchant","","final class InstallmentFee_VMTests: XCTestCase {","","    let userDefaultMock = UserDefaultsService_InstallmentFee_Mock()","    lazy var viewModel:InstallmentFeeViewModel = .init(","        bankUC: InstallmentBankUseCase(apiService: ApiServiceMock()),","        feeUC: InstallmentFeeChargeUseCase(apiService: ApiServiceMock()),","        shopUC: InstallmentShopUseCase(apiService: ApiServiceMock()),","        sessionUC: container.resolve(SessionUseCase.self)!,","        featureUC: FeaturesUseCase(userDefaultsService: userDefaultMock, profileUC: container.resolve(ProfileUseCase.self)!)","    )","    ","    let events = [\"x\": ()] \/\/ simulate user press request button","    ","    var disposeBag = DisposeBag()","    ","    override func setUpWithError() throws {","        \/\/ Put setup code here. This method is called before the invocation of each test method in the class.","        userDefaultMock.permission = [.installmentFeeCheckOnline,.installmentFeeCheckInStore]","        viewModel.banks = [.stb,.vib]","        viewModel.shops = [.shop1,.shop2]","        viewModel.periods.accept([3]) \/\/ default 3","        viewModel.viewDidLoad()","    }","","    override func tearDownWithError() throws {","        \/\/ Put teardown code here. This method is called after the invocation of each test method in the class.","        viewModel.reset()","        disposeBag = DisposeBag()","    }","    ","    func testInstallmentFee_MoneyAmount() {","        ","    }","}","","let MONEY_AMOUNT_9026:Double = 9_026_000","let MONEY_AMOUNT_3501:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireInputMoreTheFirstNumberCard)","let MONEY_AMOUNT_3502:Double = Double(InstallmentFeeMoneyWithErrorMock.RequireChoseAConversationFee)","let MONEY_AMOUNT_3503:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotSupported)","let MONEY_AMOUNT_3504:Double = Double(InstallmentFeeMoneyWithErrorMock.BelowMin)","let MONEY_AMOUNT_3505:Double = Double(InstallmentFeeMoneyWithErrorMock.AboveMax)","let MONEY_AMOUNT_3506:Double = Double(InstallmentFeeMoneyWithErrorMock.CardNotBelongToBank)","let MONEY_AMOUNT_3507:Double = Double(InstallmentFeeMoneyWithErrorMock.SupportPeriodNotSupported)","let MONEY_AMOUNT_FOR_CARD_BELONG_TO_ANOTHER_BANK:Double = Double(InstallmentFeeMoneyWithErrorMock.CardBelongToAnotherBank)","let MONEY_AMOUNT_FOR_ERROR_1:Double = Double(InstallmentFeeMoneyWithErrorMock.DefaultError)","","fileprivate enum InstallmentFeeMoneyWithErrorMock {","    static let RequireInputMoreTheFirstNumberCard = 3_501_000","    static let RequireChoseAConversationFee = 3_502_000","    static let CardNotSupported = 3_503_000","    static let BelowMin = 3_504_000","    static let AboveMax = 3_505_000","    static let CardNotBelongToBank = 3_506_000","    static let SupportPeriodNotSupported = 3_507_000","    ","    static let DefaultError = 3_170_000 \/\/ purpose error -1","    static let CardBelongToAnotherBank = 3_180_000 \/\/ add to check card not belong to current bank","}","","\/\/ MARK: -  Private function","private extension InstallmentFee_VMTests {","    ","    func getFeeCharge(","        type: InstallmentFeeCheckingType,","        amount: Double,","        bankCode: String,","        cardNoPrefix: String?,","        periods: [Int],","        installmentConversionFee: String?,","        shopId: Double?,","        shopDomain: String?","    ) -> Observable<Result<[InstallmentFeeCharge],BaseError>> {","        Observable.create {[weak self] ob in","            guard let self else {","                ob.onCompleted()","                return Disposables.create()","            }","            self.viewModel.feeUC.getInstallmentFeeCharge(type: type, amount: amount, bankCode: bankCode, cardNoPrefix: cardNoPrefix, periods: periods, installmentConversionFee: installmentConversionFee, shopId: shopId, shopDomain: shopDomain)","                .asObservable()","                .subscribe(onNext: {","                    ob.onNext(.success($0))","                }, onError: { error in","                    if let error = error as? BaseError {","                        ob.onNext(.failure(error))","                    } else {","                        ob.onCompleted()","                    }","                })","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","    ","    func validate(","        type: InstallmentFeeCheckingType,","        money: Double?,","        card: String?,","        period: [Int],","        shop: Domain.Shop?,","        shopDomain: String?,","        bank: InstallmentBank?","    ) -> Observable<Result<Void, Error>>{","        let data: InstallmentFeeChargeUseCase.DataChainGetBanksResponse = (","            [],[], shop, shopDomain, bank, type, money, card, period, nil \/\/ conversationFee","        )","        return Observable.create {[unowned self] ob in","            self.viewModel.feeUC.validate(data)","                .asObservable()","                .subscribe { _ in","                    ob.onNext(.success(()))","                } onError: { error in","                    ob.onNext(.failure(error))","                }","                .disposed(by: self.disposeBag)","            return Disposables.create()","        }","    }","}","","extension Domain.PeriodSupport {","    public var debugDescription: String {","        return \"period: \\(period) - min: \\(minPayment) - max: \\(maxPayment)\"","    }","    ","    static var three: Domain.PeriodSupport {","        .init(period: 3, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var six: Domain.PeriodSupport {","        .init(period: 6, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var nine: Domain.PeriodSupport {","        .init(period: 9, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","    static var thirtySix: Domain.PeriodSupport {","        .init(period: 36, maxPayment: 1_000_000_000, minPayment: 3_000_000)","    }","}","","extension InstallmentBank {","    static var stb: InstallmentBank {","        .init(bankCode: \"STB\", bankName: \"Sacombank\", periodSupports: [.three, .six, .nine, .thirtySix], bankLogoUrl: \"\")","    }","    ","    static var vib: InstallmentBank {","        .init(bankCode: \"VIB\", bankName: \"VietInbank\", periodSupports: [.three, .six, .nine], bankLogoUrl: \"\")","    }","}","","extension Domain.Shop {","    static var shop1: Domain.Shop {","        .init(shopId: 100, shopDomains: [\"https:\/\/shops1.com.vn\"], emailShop: nil, shopName: \"Shop one\")","    }","    static var shop2: Domain.Shop {","        .init(shopId: 200, shopDomains: [\"https:\/\/shops2.com.vn\"], emailShop: nil, shopName: \"Shop two\")","    }","}","","extension InstallmentFeeChargeState: Equatable {","    public static func == (lhs: PayooMerchant.InstallmentFeeChargeState, rhs: PayooMerchant.InstallmentFeeChargeState) -> Bool {","        lhs.note == rhs.note","    }","    ","    public var note: String {","        switch self {","        case .prepare:","            \"prepare\"","        case .haveNoPermission:","            \"haveNoPermission\"","        case .noFee:","            \"noFee\"","        case .notice(message: let message):","            \"notice\"","        case .haveFee:","            \"haveFee\"","        case .error(_):","            \"error\"","        }","    }","}"],"type":"file","fileType":"swift","identifier":"viewmodel-2-write-1.swift","syntax":"swift","highlights":[{"line":45},{"line":46},{"line":47},{"line":48}],"fileName":"InstallmentFee_VMTests.swift"}}}